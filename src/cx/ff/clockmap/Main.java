package cx.ff.clockmap;

import cx.ff.clockmap.data.Clock;
import cx.ff.clockmap.data.Memory;
import cx.ff.clockmap.vis.CircularVisualization;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Main extends javax.swing.JFrame {

    public static MainProperties mainProperties;

    private CircularVisualization circularVisualization;
    //private PScrollPane pane;
    private Memory memory;
    private HashMap<String, Clock> clocks;

    public Main()  {
        
        this("data/traffic.sample.csv");
        

    }

    public Main(String file) {
        try {
            
             mainProperties = new MainProperties(new File(file + ".properties"));
            
            
            initComponents();

            this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
            clocks = Main.loadData(file);
            memory = new Memory(clocks);

            circularVisualization = new CircularVisualization();
            circularVisualization.loadData(memory);

            //pane = new PScrollPane(circularVisualization);
            jPanel1.add(circularVisualization);
            jPanel1.repaint();

        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static HashMap<String, Clock> loadData(String file) throws IOException {
        HashMap<String, Clock> clocks = new HashMap();
        String line;
        BufferedReader br;

        // trying to load a local file instead
        br = new BufferedReader(new FileReader(file));

        while ((line = br.readLine()) != null) {

            String csv[] = line.split(";");

            String ip = csv[0];

            Clock clock = clocks.get(ip);

            if (clock == null) {
                clock = new Clock();

                clocks.put(ip, clock);
            }

            long total = 0;
            for (int i = 0; i < 24; i++) {

                long value = Double.valueOf(csv[i + 1]).longValue();
                total = total + value;
                clock.addValue(i, value);
                //  clock.addValue(i, 1);

            }

            // remove zero-valued clocks!
            if (total == 0) {
                clocks.remove(ip);
            }

        }

        return clocks;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {

        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        if (args.length == 1) {
            final String file = args[0];
            java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    new Main(file).setVisible(true);
                }
                
            });
            
        } else {
            
            java.awt.EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    new Main().setVisible(true);
                }
                
            });

        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
